# Project Structure Guidelines

## Directory Organization

### Client-Side Architecture
```
client/
├── src/
│   ├── components/          # React components
│   │   ├── ui/             # Reusable UI components (shadcn/ui)
│   │   └── *.tsx           # Feature-specific components
│   ├── hooks/              # Custom React hooks
│   ├── lib/                # Utility functions and configurations
│   ├── pages/              # Page components
│   └── main.tsx            # Application entry point
├── index.html              # HTML template
└── package.json            # Client dependencies
```

### Shared Resources
```
shared/
└── schema.ts               # Shared TypeScript schemas
```

### Configuration Files
- `components.json` - shadcn/ui component configuration
- `tailwind.config.ts` - Tailwind CSS configuration
- `vite.config.ts` - Vite build configuration
- `vitest.config.ts` - Test configuration

## File Naming Conventions

### Components
- Use PascalCase for component files: `Header.tsx`, `ClinicSection.tsx`
- Test files should match component name with `.test.tsx` suffix
- UI components follow kebab-case: `button.tsx`, `alert-dialog.tsx`

### Utilities and Hooks
- Use camelCase for utility files: `queryClient.ts`, `utils.ts`
- Hooks should start with `use-`: `use-mobile.tsx`, `use-toast.ts`

### Pages
- Use kebab-case for page files: `home.tsx`, `not-found.tsx`

## Import Organization

### Import Order
1. React and third-party libraries
2. Internal utilities and hooks
3. Components (UI components first, then feature components)
4. Relative imports

### Example
```typescript
import React from 'react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Header } from '@/components/Header'
import './styles.css'
```

## Component Structure

### Component Organization
- Keep components focused and single-responsibility
- Extract complex logic into custom hooks
- Use composition over inheritance
- Implement proper TypeScript interfaces

### File Structure Pattern
```typescript
// Component imports
// Type definitions
// Main component
// Default export
```

## Testing Structure

### Test Organization
- Co-locate tests with components
- Use descriptive test names
- Group related tests with `describe` blocks
- Test user interactions, not implementation details

## Asset Management

### Static Assets
- Place images and static files in appropriate directories
- Use descriptive file names
- Optimize images for web usage

## Configuration Management

### Environment-Specific Configs
- Separate development and production configurations
- Use environment variables for sensitive data
- Keep configuration files at project root level