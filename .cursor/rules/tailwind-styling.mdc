# Tailwind CSS Styling Guidelines

## Configuration and Setup

### Tailwind Configuration
- Use `tailwind.config.ts` for TypeScript configuration
- Extend default theme for custom design tokens
- Configure content paths to include all relevant files
- Use CSS variables for dynamic theming

### Design System Integration
```typescript
// Example theme extension
theme: {
  extend: {
    colors: {
      primary: {
        50: 'hsl(var(--primary-50))',
        500: 'hsl(var(--primary-500))',
        900: 'hsl(var(--primary-900))'
      }
    }
  }
}
```

## Class Organization

### Class Ordering
1. **Layout**: `flex`, `grid`, `block`, `inline`
2. **Positioning**: `relative`, `absolute`, `top-0`
3. **Sizing**: `w-full`, `h-screen`, `max-w-lg`
4. **Spacing**: `p-4`, `m-2`, `gap-4`
5. **Typography**: `text-lg`, `font-bold`, `text-center`
6. **Colors**: `bg-white`, `text-gray-900`
7. **Borders**: `border`, `rounded-lg`, `shadow-md`
8. **Effects**: `hover:`, `focus:`, `transition-all`

### Example
```tsx
<div className="flex flex-col items-center justify-center w-full max-w-md p-6 mx-auto bg-white rounded-lg shadow-lg">
  <h1 className="text-2xl font-bold text-gray-900 mb-4">Title</h1>
</div>
```

## Responsive Design

### Breakpoint Strategy
- Mobile-first approach (default styles for mobile)
- Use responsive prefixes: `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- Test on multiple screen sizes

### Responsive Patterns
```tsx
// Mobile-first responsive design
<div className="w-full md:w-1/2 lg:w-1/3">
  <div className="p-4 md:p-6 lg:p-8">
    <h2 className="text-lg md:text-xl lg:text-2xl">
      Responsive Title
    </h2>
  </div>
</div>
```

## Component Styling

### Utility-First Approach
- Prefer utility classes over custom CSS
- Use `@apply` sparingly for repeated patterns
- Keep component styles co-located

### Custom Utilities
```css
/* Only when absolutely necessary */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}
```

## Color System

### Color Usage
- Use semantic color names from design system
- Implement proper contrast ratios
- Support dark/light theme variations
- Use CSS variables for dynamic theming

### Color Patterns
```tsx
// Semantic color usage
<button className="bg-primary-500 hover:bg-primary-600 text-white">
  Primary Action
</button>

<div className="bg-destructive/10 text-destructive border border-destructive/20">
  Error State
</div>
```

## Typography

### Text Hierarchy
- Use consistent text scales
- Implement proper line heights
- Consider reading experience
- Maintain vertical rhythm

### Typography Patterns
```tsx
<div className="space-y-4">
  <h1 className="text-3xl font-bold tracking-tight">Heading 1</h1>
  <h2 className="text-2xl font-semibold">Heading 2</h2>
  <p className="text-base leading-relaxed text-muted-foreground">
    Body text with proper line height and color
  </p>
</div>
```

## Layout Patterns

### Flexbox Layouts
```tsx
// Common flex patterns
<div className="flex items-center justify-between">
  <div className="flex items-center gap-2">
    <Icon className="w-5 h-5" />
    <span>Label</span>
  </div>
  <Button>Action</Button>
</div>
```

### Grid Layouts
```tsx
// Responsive grid
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {items.map(item => (
    <Card key={item.id} className="p-6">
      {item.content}
    </Card>
  ))}
</div>
```

## Interactive States

### State Variations
- Implement hover, focus, active states
- Use appropriate transition timing
- Ensure accessibility compliance
- Consider reduced motion preferences

### State Examples
```tsx
<button className="
  px-4 py-2 
  bg-primary-500 hover:bg-primary-600 
  focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
  active:bg-primary-700
  transition-colors duration-200
  disabled:opacity-50 disabled:cursor-not-allowed
">
  Interactive Button
</button>
```

## Performance Optimization

### Class Optimization
- Use PurgeCSS configuration
- Avoid unnecessary class combinations
- Group related utilities
- Use CSS custom properties for dynamic values

### Bundle Size
- Monitor Tailwind bundle size
- Remove unused utilities
- Use JIT mode for optimal builds

## Accessibility

### Focus Management
```tsx
<button className="
  focus:outline-none 
  focus:ring-2 
  focus:ring-primary-500 
  focus:ring-offset-2
">
  Accessible Button
</button>
```

### Screen Reader Support
- Use appropriate color contrast
- Implement focus indicators
- Support reduced motion preferences
- Test with screen readers

## Best Practices

### Do's
- Use utility classes consistently
- Implement responsive design from start
- Follow design system guidelines
- Test across different devices

### Don'ts
- Avoid arbitrary values unless necessary
- Don't mix utility classes with large custom CSS
- Don't ignore accessibility requirements
- Don't use inline styles instead of utilities