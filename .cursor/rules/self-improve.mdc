# Self-Improvement Guidelines

## Code Quality Standards

### Before Making Changes
1. **Understand the Context**
   - Read existing code thoroughly
   - Understand the current architecture
   - Identify patterns and conventions already in use

2. **Plan Before Implementation**
   - Break down complex tasks into smaller steps
   - Consider edge cases and error scenarios
   - Plan for testability and maintainability

### During Development

#### Code Analysis
- Use semantic search to understand existing implementations
- Look for similar patterns in the codebase
- Check for existing utilities before creating new ones

#### Implementation Quality
- Write clean, readable code
- Follow established patterns and conventions
- Use TypeScript effectively for type safety
- Implement proper error handling

#### Testing Approach
- Write tests for new functionality
- Ensure existing tests still pass
- Test edge cases and error conditions
- Use meaningful test descriptions

### After Implementation

#### Code Review Checklist
- [ ] Code follows project conventions
- [ ] TypeScript types are properly defined
- [ ] Components are properly tested
- [ ] No sensitive data in code
- [ ] Performance considerations addressed
- [ ] Accessibility requirements met

#### Documentation Updates
- Update relevant documentation
- Add CKDEV comments for complex logic
- Update type definitions if needed

## Learning and Adaptation

### Continuous Improvement
1. **Learn from Existing Code**
   - Study well-implemented components
   - Understand architectural decisions
   - Adopt best practices found in codebase

2. **Stay Updated with Patterns**
   - Follow React best practices
   - Use modern TypeScript features
   - Implement current testing patterns

3. **Refactoring Approach**
   - Identify code smells
   - Improve without breaking functionality
   - Maintain backward compatibility

### Problem-Solving Process

#### When Encountering Issues
1. **Analyze the Problem**
   - Understand the root cause
   - Check similar implementations
   - Review error messages carefully

2. **Research Solutions**
   - Search codebase for similar patterns
   - Check documentation and best practices
   - Consider multiple approaches

3. **Implement and Validate**
   - Start with simplest solution
   - Test thoroughly
   - Iterate based on feedback

## Quality Assurance

### Code Standards
- Maintain consistent formatting
- Use meaningful variable names
- Keep functions focused and small
- Avoid code duplication

### Performance Considerations
- Optimize component re-renders
- Use appropriate React hooks
- Consider bundle size impact
- Implement lazy loading when beneficial

### Security Practices
- Never include sensitive data in code
- Validate user inputs
- Use secure coding practices
- Follow OWASP guidelines

## Collaboration Guidelines

### Communication
- Ask clarifying questions when uncertain
- Explain complex implementations
- Document architectural decisions
- Provide context in code comments

### Knowledge Sharing
- Share learning and discoveries
- Document solutions to common problems
- Contribute to project documentation
- Help maintain code quality standards